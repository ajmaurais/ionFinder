#!/usr/bin/env python

import argparse
import re
import sys

def read_source(fname):
    """
    Read variable source file.

    Variables should be in the format: `VAR_NAME=VALUE`
    Matching double or single quotes surrounding `VALUE`
    will be removed.

    Parameters
    ----------
    fname : str
        Path to variable source file.

    Returns
    -------
    variables: dict
        Dict containing all variables in variables in `fname`.
    """

    lines = list()
    with open(fname, 'r') as inF:
        for line in inF:
            l = line.strip()
            l = l.partition('#')[0]
            if l:
                lines.append(l)

    ret = dict()
    for line in lines:
        m = re.search(r'^(\w+)[ ]*=[ ]*([\'\"](.*)[\"\']|.+)$', line)
        if not m:
            raise SyntaxError("Could not parse line: {}".format(line))
        ret[m.group(1)] = m.group(2) if m.group(3) is None else m.group(3)

    return ret


def substutute_variabies(variables, template_path, output_path,
                         warn_level=1,
                         sub_re=r'@(\w+)@'):
    """
    Substitute tags matching `sub_re` in `template_path` with the
    key value pairs in `variables` and write to `output_path`.

    Parameters
    ----------
    variables : dict
    template_path : str
    output_path : str
    warn_level : int
    sub_re : str
        Regex should match all tags. Capturing group should extract
        the variable key to match in `variables`
    """

    def error_message(s1, s2):
        return '{}: {} not found in input.\n'.format(s1, s2)

    with open(template_path, 'r') as inF:
        template_lines = inF.readlines()

    output_lines = list()
    for line in template_lines:
        m = re.search(sub_re, line)
        if m:
            if m.group(1) in variables:
                repl = variables[m.group(1)]
                line = re.sub(sub_re, repl, line)
            else:
                if warn_level == 0:
                    continue
                elif warn_level == 1:
                    sys.stderr.write(error_message('WARN', m.group(1)))
                elif warn_level == 2:
                    raise RuntimeError(error_message('ERROR', m.group(1)))
        output_lines.append(line)

    with open(output_path, 'w') as outF:
        for line in output_lines:
            outF.write(line)


def main():
    parser = argparse.ArgumentParser(prog='configure_file',
            description='Substutute variables in config file a la cmake configure_file function.')

    parser.add_argument('-w', '--warn_level', choices = [0,1,2], default = 1, type = int,
            help = 'Set behavior when tag is not found in source. 1 is the default.')

    parser.add_argument('source', help='Text file with variable definitions.')
    parser.add_argument('input', help='Template file with variable references to substutute')
    parser.add_argument('output', help='Destination file.')

    args = parser.parse_args()

    sys.stdout.write('Reading variables from {}...'.format(args.source))
    variables = read_source(args.source)
    sys.stdout.write('\tDone!\n')
    substutute_variabies(variables, args.input, args.output, warn_level = args.warn_level)
    sys.stdout.write('Configured file written to: {}\n'.format(args.output))


if __name__ == "__main__":
    main()


